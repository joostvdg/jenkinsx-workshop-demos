{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Jenkins X Demos Hi.","title":"Home"},{"location":"#jenkins-x-demos","text":"Hi.","title":"Jenkins X Demos"},{"location":"install/","text":"Install Jenkins X Install Prerequisites Git GitBash if Windows Kubectl Helm Public cloud CLI such as gcloud Info For Windows, we recommend using the Chocolatey package manager. Info For Linux, we recommend using the Snap package manager. Info For MacOS we recommend using the Homebrew package manager. Git Debian 1 2 3 sudo apt-get update sudo apt-get upgrade sudo apt-get install git RHEL 1 2 sudo yum upgrade sudo yum install git Homebrew 1 brew install git Windows 1 2 choco install git.install choco install hub Kubectl Snap 1 2 sudo snap install kubectl --classic kubectl version Debian 1 2 3 4 5 sudo apt-get update sudo apt-get install -y apt-transport-https curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - echo deb https://apt.kubernetes.io/ kubernetes-xenial main | sudo tee -a /etc/apt/sources.list.d/kubernetes.list sudo apt-get update sudo apt-get install -y kubectl RHEL 1 2 3 4 5 6 7 8 9 10 cat EOF /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg EOF yum install -y kubectl Homebrew 1 brew install kubernetes-cli Windows 1 choco install kubernetes-cli Curl 1 2 3 curl -LO https://storage.googleapis.com/kubernetes-release/release/ $( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ) /bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl Helm Snap 1 sudo snap install helm --classic Homebrew 1 brew install kubernetes-helm Windows 1 choco install kubernetes-helm For other options, visit the install guide . Cloud CLI's AWS Snap 1 sudo snap install aws-cli --classic Homebrew 1 brew install awscli Windows 1 choco install awscli For other options, visit the install guide . EKS CTL Linux 1 2 curl --silent --location https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_ $( uname -s ) _amd64.tar.gz | tar xz -C /tmp sudo mv /tmp/eksctl /usr/local/bin Homebrew 1 2 brew tap weaveworks/tap brew install weaveworks/tap/eksctl Windows 1 chocolatey install eksctl For other options, visit the install guide . Google Snap 1 sudo snap install google-cloud-sdk --classic Homebrew 1 brew cask install google-cloud-sdk. Windows 1 choco install gcloudsdk For other options, visit the install guide . Azure Snap 1 sudo snap install aws-cli --classic Homebrew 1 brew install awscli Windows 1 choco install azure-cli For other options, visit the install guide . Install JX Binary The jx binary is the main vehicle for Jenkins X to manage anything related to Jenkins X and your applications. Warning It is recommended to always update your jx binary at the start of your workday. It gets updates and fixes several times a day, so don't stay behind! Info If you are running on Mac OS X, Jenkins X is using Homebrew to install the various CLI. It will install it if not present. Install Linux 1 2 3 4 mkdir -p ~/.jx/bin curl -L https://github.com/jenkins-x/jx/releases/download/v1.3.1068/jx-linux-amd64.tar.gz | tar xzv -C ~/.jx/bin export PATH = $PATH :~/.jx/bin echo export PATH=$PATH:~/.jx/bin ~/.bashrc RHEL 1 2 sudo yum upgrade sudo yum install git Homebrew 1 2 brew tap jenkins-x/jx brew install jx Windows 1 choco install jenkins-x Install JX w/ Cluster You can install Jenkins X in an existing Kubernetes cluster, or let it install a cluster for you. Below are the examples for installing a cluster via Jenkins X before it installs itself into it. Info For all the installation options, please consult the jx CLI. jx create cluster ${clusterType} --help When in doubt, accept the default value! Variables Set these variables in your console, for use with the install commands. CLUSTER_NAME your desired cluster name (can be anything) PROJECT is your Google Cloud project-id you can retrieve this via your console or via the gcloud CLI: gcloud config list 1 2 3 4 5 6 7 REGION = us-east1 ZONE = ${ REGION } -b PREFIX = jx MACHINE_TYPE = n1-standard-2 ADMIN_PSW = admin CLUSTER_NAME = PROJECT = Configuration Warning If you are using Java with Maven or Gradle, you'd want to install Nexus. Else, you can disable it as per example below. Disable Nexus Copy below text into a file called myvalues.yaml . 1 2 nexus: enabled: false Install Info EKS option will download and use the eksctl tool to create a new EKS cluster, then it\u2019ll install Jenkins X on top. Info When you're creating your first cluster with GKE, you will need to login for authorization. If you have authorization taken care of, you can add --no-login to prevent the process. GKE 1 2 3 4 jx create cluster gke -n $CLUSTER_NAME -p $PROJECT -z ${ ZONE } \\ -m ${ MACHINE_TYPE } --min-num-nodes 3 --max-num-nodes 5 \\ --default-admin-password = ${ ADMIN_PSW } \\ --default-environment-prefix ${ PREFIX } --no-tiller EKS 1 jx create cluster eks Kops 1 jx create cluster aws Azure 1 jx create cluster aks For more options and information, read the documentation . Test install 1 kubectl -n jx get pods Install Serverless Variables 1 2 3 4 5 6 7 CLUSTER_NAME = PROJECT = ADMIN_PSW = admin PREFIX = jx REGION = us-east1 ZONE = ${ REGION } -a MACHINE_TYPE = n1-standard-1 Install GKE 1 2 3 4 5 jx create cluster gke -n $CLUSTER_NAME -p $PROJECT -z ${ ZONE } \\ -m n1-standard-2 --min-num-nodes 3 --max-num-nodes 5 \\ --default-admin-password = ${ ADMIN_PSW } \\ --default-environment-prefix \\ --prow --tekton --no-tiller","title":"Install"},{"location":"install/#install-jenkins-x","text":"","title":"Install Jenkins X"},{"location":"install/#install-prerequisites","text":"Git GitBash if Windows Kubectl Helm Public cloud CLI such as gcloud Info For Windows, we recommend using the Chocolatey package manager. Info For Linux, we recommend using the Snap package manager. Info For MacOS we recommend using the Homebrew package manager.","title":"Install Prerequisites"},{"location":"install/#git","text":"Debian 1 2 3 sudo apt-get update sudo apt-get upgrade sudo apt-get install git RHEL 1 2 sudo yum upgrade sudo yum install git Homebrew 1 brew install git Windows 1 2 choco install git.install choco install hub","title":"Git"},{"location":"install/#kubectl","text":"Snap 1 2 sudo snap install kubectl --classic kubectl version Debian 1 2 3 4 5 sudo apt-get update sudo apt-get install -y apt-transport-https curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add - echo deb https://apt.kubernetes.io/ kubernetes-xenial main | sudo tee -a /etc/apt/sources.list.d/kubernetes.list sudo apt-get update sudo apt-get install -y kubectl RHEL 1 2 3 4 5 6 7 8 9 10 cat EOF /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64 enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg EOF yum install -y kubectl Homebrew 1 brew install kubernetes-cli Windows 1 choco install kubernetes-cli Curl 1 2 3 curl -LO https://storage.googleapis.com/kubernetes-release/release/ $( curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt ) /bin/linux/amd64/kubectl chmod +x ./kubectl sudo mv ./kubectl /usr/local/bin/kubectl","title":"Kubectl"},{"location":"install/#helm","text":"Snap 1 sudo snap install helm --classic Homebrew 1 brew install kubernetes-helm Windows 1 choco install kubernetes-helm For other options, visit the install guide .","title":"Helm"},{"location":"install/#cloud-clis","text":"","title":"Cloud CLI's"},{"location":"install/#aws","text":"Snap 1 sudo snap install aws-cli --classic Homebrew 1 brew install awscli Windows 1 choco install awscli For other options, visit the install guide .","title":"AWS"},{"location":"install/#eks-ctl","text":"Linux 1 2 curl --silent --location https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_ $( uname -s ) _amd64.tar.gz | tar xz -C /tmp sudo mv /tmp/eksctl /usr/local/bin Homebrew 1 2 brew tap weaveworks/tap brew install weaveworks/tap/eksctl Windows 1 chocolatey install eksctl For other options, visit the install guide .","title":"EKS CTL"},{"location":"install/#google","text":"Snap 1 sudo snap install google-cloud-sdk --classic Homebrew 1 brew cask install google-cloud-sdk. Windows 1 choco install gcloudsdk For other options, visit the install guide .","title":"Google"},{"location":"install/#azure","text":"Snap 1 sudo snap install aws-cli --classic Homebrew 1 brew install awscli Windows 1 choco install azure-cli For other options, visit the install guide .","title":"Azure"},{"location":"install/#install-jx-binary","text":"The jx binary is the main vehicle for Jenkins X to manage anything related to Jenkins X and your applications. Warning It is recommended to always update your jx binary at the start of your workday. It gets updates and fixes several times a day, so don't stay behind! Info If you are running on Mac OS X, Jenkins X is using Homebrew to install the various CLI. It will install it if not present.","title":"Install JX Binary"},{"location":"install/#install","text":"Linux 1 2 3 4 mkdir -p ~/.jx/bin curl -L https://github.com/jenkins-x/jx/releases/download/v1.3.1068/jx-linux-amd64.tar.gz | tar xzv -C ~/.jx/bin export PATH = $PATH :~/.jx/bin echo export PATH=$PATH:~/.jx/bin ~/.bashrc RHEL 1 2 sudo yum upgrade sudo yum install git Homebrew 1 2 brew tap jenkins-x/jx brew install jx Windows 1 choco install jenkins-x","title":"Install"},{"location":"install/#install-jx-w-cluster","text":"You can install Jenkins X in an existing Kubernetes cluster, or let it install a cluster for you. Below are the examples for installing a cluster via Jenkins X before it installs itself into it. Info For all the installation options, please consult the jx CLI. jx create cluster ${clusterType} --help When in doubt, accept the default value!","title":"Install JX w/ Cluster"},{"location":"install/#variables","text":"Set these variables in your console, for use with the install commands. CLUSTER_NAME your desired cluster name (can be anything) PROJECT is your Google Cloud project-id you can retrieve this via your console or via the gcloud CLI: gcloud config list 1 2 3 4 5 6 7 REGION = us-east1 ZONE = ${ REGION } -b PREFIX = jx MACHINE_TYPE = n1-standard-2 ADMIN_PSW = admin CLUSTER_NAME = PROJECT =","title":"Variables"},{"location":"install/#configuration","text":"Warning If you are using Java with Maven or Gradle, you'd want to install Nexus. Else, you can disable it as per example below.","title":"Configuration"},{"location":"install/#disable-nexus","text":"Copy below text into a file called myvalues.yaml . 1 2 nexus: enabled: false","title":"Disable Nexus"},{"location":"install/#install_1","text":"Info EKS option will download and use the eksctl tool to create a new EKS cluster, then it\u2019ll install Jenkins X on top. Info When you're creating your first cluster with GKE, you will need to login for authorization. If you have authorization taken care of, you can add --no-login to prevent the process. GKE 1 2 3 4 jx create cluster gke -n $CLUSTER_NAME -p $PROJECT -z ${ ZONE } \\ -m ${ MACHINE_TYPE } --min-num-nodes 3 --max-num-nodes 5 \\ --default-admin-password = ${ ADMIN_PSW } \\ --default-environment-prefix ${ PREFIX } --no-tiller EKS 1 jx create cluster eks Kops 1 jx create cluster aws Azure 1 jx create cluster aks For more options and information, read the documentation .","title":"Install"},{"location":"install/#test-install","text":"1 kubectl -n jx get pods","title":"Test install"},{"location":"install/#install-serverless","text":"","title":"Install Serverless"},{"location":"install/#variables_1","text":"1 2 3 4 5 6 7 CLUSTER_NAME = PROJECT = ADMIN_PSW = admin PREFIX = jx REGION = us-east1 ZONE = ${ REGION } -a MACHINE_TYPE = n1-standard-1","title":"Variables"},{"location":"install/#install_2","text":"GKE 1 2 3 4 5 jx create cluster gke -n $CLUSTER_NAME -p $PROJECT -z ${ ZONE } \\ -m n1-standard-2 --min-num-nodes 3 --max-num-nodes 5 \\ --default-admin-password = ${ ADMIN_PSW } \\ --default-environment-prefix \\ --prow --tekton --no-tiller","title":"Install"},{"location":"buildpack/","text":"BuildPack Demo","title":"Demo"},{"location":"buildpack/#buildpack-demo","text":"","title":"BuildPack Demo"},{"location":"godemo/","text":"Go Demo This is a minimal HelloWorld demo! First, make sure you have a Kubernetes cluster with Jenkins X installe Warning It is easiest to use all the default values, such as a dns on nip.io and Static Jenkins . Create Quickstart Let's examine what quickstart does. 1 jx create quickstart # Cancel with ctrl+c Cancel it with ctr+c , as it will be very interactive. Let's create the Go (lang) demo! 1 jx create quickstart -l go -p jx-go -b Info Go to github.com/jenkins-x-quickstarts to see all the available quickstarts. Open repo Replace ? with your GitHub user. 1 export GH_USER = ? 1 open https://github.com/ $GH_USER /jx-go View created files Let's take a look at what was created: 1 ls -l jx-go Dockerfile 1 cat jx-go/Dockerfile pipeline 1 cat jx-go/jenkins-x.yml Makefile 1 cat jx-go/Makefile Skaffold 1 cat jx-go/skaffold.yaml And let's take a loot at the Helm charts. Charts root 1 ls -l jx-go/charts Application Chart 1 ls -l jx-go/charts/jx-go Preview Chart 1 ls -l jx-go/charts/preview Webhook Jenkins X works with Git and wants to work event based. This means there should be a webhook, which will be send to our Jenkins X's cluster. 1 open https://github.com/ $GH_USER /jx-go/settings/hooks Releases Jenkins X will create releases for you in your Git repository (where applicable). To view them: 1 open https://github.com/ $GH_USER /jx-go/releases Explore Application in JX Jenkins UI 1 jx console Activities 1 jx get activities Acitivites jx-go 1 jx get activities -f jx-go -w # Cancel with ctrl+c Build Logs 1 jx get build logs # Cancel with ctrl+c Build Logs jx-go 1 jx get build logs -f jx-go # Cancel with ctrl+c Build Logs of Job 1 jx get build logs $GH_USER /jx-go/master General Jenkins X listings Pipelines 1 jx get pipelines Applications 1 jx get applications Applications in Env 1 jx get applications -e staging Environments 1 jx get env Update the application First, make sure the application has been build successfully and is running in our staging environment. Confirm we're ready 1 jx get activities -f jx-go -w You should see something like, after which we can continue the next step. 1 2 3 4 5 6 7 STEP STARTED AGO DURATION STATUS joostvdg/jx-go/master #1 Running Version: 0.0.1 Release 4m23s 1m0s Succeeded Promote: staging 3m23s 2m26s Succeeded PullRequest 3m23s 1m25s Succeeded PullRequest: https://github.com/joostvdg/environment-jx-staging/pull/1 Merge SHA: f602fd78694fcfef7b59b27469e0e2b8538e1bb7 Update 1m58s 1m1s Succeeded Status: Success at: http://jenkins.jx.35.231.11.119.nip.io/job/joostvdg/job/environment-jx-staging/job/master/2/display/redirect Promoted 1m58s 1m1s Succeeded Application is at: http://jx-go.jx-staging.35.231.11.119.nip.io 1 2 JX_HOST = $( kubectl get ing -n jx-staging jx-go -o jsonpath = {.spec.rules[0].host} ) open http:// $JX_HOST You should see a very fancy (for 1992) page which says Hello from: Jenkins X golang http example . Make the change We will now create a WIP branch. 1 git checkout -b wip Now edit our main.go file using your favorite editor - or VIM if you want. Change the title variable: title := Jenkins X golang http example to a value you like. For example: title := Jenkins X Is Awesome! . 1 2 3 git add main.go git commit -m changed our message to be awesome git push origin wip Create PR We will have to create PR for our change. When pushing to Git, you should have received a link to create a pr. If not, see below: 1 open https://github.com/ ${ GH_USER } /jx-go/pull/new/wip Keep the PR page open, you will see why! We will watch the activities to see when our preview is ready! 1 jx get activities -f jx-go -w Once we see something like Preview Application 0s http://jx-go.jx-joostvdg-jx-go-pr-1.35.231.11.119.nip.io We can go back to our PR page, which should now the link to the preview as well! Confirm your change is successful and merge the pull request by clicking the merge button. Go back to the activities feed - in case you closed it. And wait for the PR to land in staging. 1 jx get activities -f jx-go -w Once the activity Promote: staging is succeeded, we can confirm our application is updated. 1 2 JX_HOST = $( kubectl get ing -n jx-staging jx-go -o jsonpath = {.spec.rules[0].host} ) curl http:// $JX_HOST To wrap up, go back to the master branch and pull the changes from the PR. 1 2 git checkout master git pull Promote to Production Applications will be automatically promoted to staging, to promote them to production we have to take manual action. How do you promote manually To manually Promote a version of your application to an environment use the jx promote command. 1 jx promote --app myapp --version 1 .2.3 --env production The command waits for the promotion to complete, logging details of its progress. You can specify the timeout to wait for the promotion to complete via the --timeout argument. e.g. to wait for 5 hours 1 jx promote --app myapp --version 1 .2.3 --env production --timeout 5h You can use terms like 20m or 10h30m for the various duration expressions. To promote our jx-go application, run the following command. Promote jx-go to production 1 jx promote --app jx-go --version 0 .0.1 --env production --timeout 1h Info You will get a warning message stating Failed to query the Pull Request last commit status for , which is at this time (April 2019) expected behavior. Once the promotion is completed successfully, you should be returned to your console. Let's confirm our application landed in Production! 1 2 JX_HOST = $( kubectl get ing -n jx-production jx-go -o jsonpath = {.spec.rules[0].host} ) curl http:// $JX_HOST","title":"Demo"},{"location":"godemo/#go-demo","text":"This is a minimal HelloWorld demo! First, make sure you have a Kubernetes cluster with Jenkins X installe Warning It is easiest to use all the default values, such as a dns on nip.io and Static Jenkins .","title":"Go Demo"},{"location":"godemo/#create-quickstart","text":"Let's examine what quickstart does. 1 jx create quickstart # Cancel with ctrl+c Cancel it with ctr+c , as it will be very interactive. Let's create the Go (lang) demo! 1 jx create quickstart -l go -p jx-go -b Info Go to github.com/jenkins-x-quickstarts to see all the available quickstarts.","title":"Create Quickstart"},{"location":"godemo/#open-repo","text":"Replace ? with your GitHub user. 1 export GH_USER = ? 1 open https://github.com/ $GH_USER /jx-go","title":"Open repo"},{"location":"godemo/#view-created-files","text":"Let's take a look at what was created: 1 ls -l jx-go Dockerfile 1 cat jx-go/Dockerfile pipeline 1 cat jx-go/jenkins-x.yml Makefile 1 cat jx-go/Makefile Skaffold 1 cat jx-go/skaffold.yaml And let's take a loot at the Helm charts. Charts root 1 ls -l jx-go/charts Application Chart 1 ls -l jx-go/charts/jx-go Preview Chart 1 ls -l jx-go/charts/preview","title":"View created files"},{"location":"godemo/#webhook","text":"Jenkins X works with Git and wants to work event based. This means there should be a webhook, which will be send to our Jenkins X's cluster. 1 open https://github.com/ $GH_USER /jx-go/settings/hooks","title":"Webhook"},{"location":"godemo/#releases","text":"Jenkins X will create releases for you in your Git repository (where applicable). To view them: 1 open https://github.com/ $GH_USER /jx-go/releases","title":"Releases"},{"location":"godemo/#explore-application-in-jx","text":"Jenkins UI 1 jx console Activities 1 jx get activities Acitivites jx-go 1 jx get activities -f jx-go -w # Cancel with ctrl+c Build Logs 1 jx get build logs # Cancel with ctrl+c Build Logs jx-go 1 jx get build logs -f jx-go # Cancel with ctrl+c Build Logs of Job 1 jx get build logs $GH_USER /jx-go/master","title":"Explore Application in JX"},{"location":"godemo/#general-jenkins-x-listings","text":"Pipelines 1 jx get pipelines Applications 1 jx get applications Applications in Env 1 jx get applications -e staging Environments 1 jx get env","title":"General Jenkins X listings"},{"location":"godemo/#update-the-application","text":"First, make sure the application has been build successfully and is running in our staging environment.","title":"Update the application"},{"location":"godemo/#confirm-were-ready","text":"1 jx get activities -f jx-go -w You should see something like, after which we can continue the next step. 1 2 3 4 5 6 7 STEP STARTED AGO DURATION STATUS joostvdg/jx-go/master #1 Running Version: 0.0.1 Release 4m23s 1m0s Succeeded Promote: staging 3m23s 2m26s Succeeded PullRequest 3m23s 1m25s Succeeded PullRequest: https://github.com/joostvdg/environment-jx-staging/pull/1 Merge SHA: f602fd78694fcfef7b59b27469e0e2b8538e1bb7 Update 1m58s 1m1s Succeeded Status: Success at: http://jenkins.jx.35.231.11.119.nip.io/job/joostvdg/job/environment-jx-staging/job/master/2/display/redirect Promoted 1m58s 1m1s Succeeded Application is at: http://jx-go.jx-staging.35.231.11.119.nip.io 1 2 JX_HOST = $( kubectl get ing -n jx-staging jx-go -o jsonpath = {.spec.rules[0].host} ) open http:// $JX_HOST You should see a very fancy (for 1992) page which says Hello from: Jenkins X golang http example .","title":"Confirm we're ready"},{"location":"godemo/#make-the-change","text":"We will now create a WIP branch. 1 git checkout -b wip Now edit our main.go file using your favorite editor - or VIM if you want. Change the title variable: title := Jenkins X golang http example to a value you like. For example: title := Jenkins X Is Awesome! . 1 2 3 git add main.go git commit -m changed our message to be awesome git push origin wip","title":"Make the change"},{"location":"godemo/#create-pr","text":"We will have to create PR for our change. When pushing to Git, you should have received a link to create a pr. If not, see below: 1 open https://github.com/ ${ GH_USER } /jx-go/pull/new/wip Keep the PR page open, you will see why! We will watch the activities to see when our preview is ready! 1 jx get activities -f jx-go -w Once we see something like Preview Application 0s http://jx-go.jx-joostvdg-jx-go-pr-1.35.231.11.119.nip.io We can go back to our PR page, which should now the link to the preview as well! Confirm your change is successful and merge the pull request by clicking the merge button. Go back to the activities feed - in case you closed it. And wait for the PR to land in staging. 1 jx get activities -f jx-go -w Once the activity Promote: staging is succeeded, we can confirm our application is updated. 1 2 JX_HOST = $( kubectl get ing -n jx-staging jx-go -o jsonpath = {.spec.rules[0].host} ) curl http:// $JX_HOST To wrap up, go back to the master branch and pull the changes from the PR. 1 2 git checkout master git pull","title":"Create PR"},{"location":"godemo/#promote-to-production","text":"Applications will be automatically promoted to staging, to promote them to production we have to take manual action.","title":"Promote to Production"},{"location":"godemo/#how-do-you-promote-manually","text":"To manually Promote a version of your application to an environment use the jx promote command. 1 jx promote --app myapp --version 1 .2.3 --env production The command waits for the promotion to complete, logging details of its progress. You can specify the timeout to wait for the promotion to complete via the --timeout argument. e.g. to wait for 5 hours 1 jx promote --app myapp --version 1 .2.3 --env production --timeout 5h You can use terms like 20m or 10h30m for the various duration expressions. To promote our jx-go application, run the following command.","title":"How do you promote manually"},{"location":"godemo/#promote-jx-go-to-production","text":"1 jx promote --app jx-go --version 0 .0.1 --env production --timeout 1h Info You will get a warning message stating Failed to query the Pull Request last commit status for , which is at this time (April 2019) expected behavior. Once the promotion is completed successfully, you should be returned to your console. Let's confirm our application landed in Production! 1 2 JX_HOST = $( kubectl get ing -n jx-production jx-go -o jsonpath = {.spec.rules[0].host} ) curl http:// $JX_HOST","title":"Promote jx-go to production"},{"location":"k8s/","text":"Kubernetes Basics Pod Deployment Service Ingress Volume","title":"Basics"},{"location":"k8s/#kubernetes-basics","text":"","title":"Kubernetes Basics"},{"location":"k8s/#pod","text":"","title":"Pod"},{"location":"k8s/#deployment","text":"","title":"Deployment"},{"location":"k8s/#service","text":"","title":"Service"},{"location":"k8s/#ingress","text":"","title":"Ingress"},{"location":"k8s/#volume","text":"","title":"Volume"},{"location":"k8s/helm/","text":"","title":"Helm"},{"location":"k8s/knative-build/","text":"","title":"Knative Build"},{"location":"k8s/tools/","text":"Kubernetes Tools Kuard Kuard is a small demo application to show your cluster works. Also exposes some info you might want to see. 1 2 kubectl run --restart = Never --image = gcr.io/kuar-demo/kuard-amd64:blue kuard kubectl port-forward kuard 8080 :8080 Open your browser to http://localhost:8080 . Stern Stern allows you to tail multiple pods on Kubernetes and multiple containers within the pod. Each result is color coded for quicker debugging. 1 brew install stern Usage Imagine a build in Jenkins using more than one container in the Pod. You want to tail the logs of all containers... you can with stern. 1 stern maven- Kube Capacity Kube Capacity is a simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster. 1 2 brew tap robscott/tap brew install robscott/tap/kube-capacity 1 kube-capacity 1 2 3 4 NODE CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * 560m ( 28 % ) 130m ( 7 % ) 572Mi ( 9 % ) 770Mi ( 13 % ) example-node-1 220m ( 22 % ) 10m ( 1 % ) 192Mi ( 6 % ) 360Mi ( 12 % ) example-node-2 340m ( 34 % ) 120m ( 12 % ) 380Mi ( 13 % ) 410Mi ( 14 % ) 1 kube-capacity --pods 1 2 3 4 5 6 7 8 9 10 NODE NAMESPACE POD CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * * * 560m ( 28 % ) 780m ( 38 % ) 572Mi ( 9 % ) 770Mi ( 13 % ) example-node-1 * * 220m ( 22 % ) 320m ( 32 % ) 192Mi ( 6 % ) 360Mi ( 12 % ) example-node-1 kube-system metrics-server-lwc6z 100m ( 10 % ) 200m ( 20 % ) 100Mi ( 3 % ) 200Mi ( 7 % ) example-node-1 kube-system coredns-7b5bcb98f8 120m ( 12 % ) 120m ( 12 % ) 92Mi ( 3 % ) 160Mi ( 5 % ) example-node-2 * * 340m ( 34 % ) 460m ( 46 % ) 380Mi ( 13 % ) 410Mi ( 14 % ) example-node-2 kube-system kube-proxy-3ki7 200m ( 20 % ) 280m ( 28 % ) 210Mi ( 7 % ) 210Mi ( 7 % ) example-node-2 tiller tiller-deploy 140m ( 14 % ) 180m ( 18 % ) 170Mi ( 5 % ) 200Mi ( 7 % ) 1 kube-capacity --util 1 2 3 4 NODE CPU REQUESTS CPU LIMITS CPU UTIL MEMORY REQUESTS MEMORY LIMITS MEMORY UTIL * 560m ( 28 % ) 130m ( 7 % ) 40m ( 2 % ) 572Mi ( 9 % ) 770Mi ( 13 % ) 470Mi ( 8 % ) example-node-1 220m ( 22 % ) 10m ( 1 % ) 10m ( 1 % ) 192Mi ( 6 % ) 360Mi ( 12 % ) 210Mi ( 7 % ) example-node-2 340m ( 34 % ) 120m ( 12 % ) 30m ( 3 % ) 380Mi ( 13 % ) 410Mi ( 14 % ) 260Mi ( 9 % ) 1 kube-capacity --pods --util Velero Velero RBAC Lookup RBAC Lookup Install bash 1 brew install reactiveops/tap/rbac-lookup Krew 1 kubectl krew install rbac-lookup Lookup user 1 rbac-lookup jvandergriendt -owide Lookup GKE user 1 rbac-lookup jvandergriendt --gke K9S K9S is a tool that gives you a console UI on your kubernetes cluster/namespace. Install 1 brew tap derailed/k9s brew install k9s Use By default is looks at a single namespace, and allows you to view elements of the pods running. 1 k9s -n cje Kiali https://www.kiali.io/ Telepresence https://www.telepresence.io/ Dive","title":"Kubernetes Tools"},{"location":"k8s/tools/#kubernetes-tools","text":"","title":"Kubernetes Tools"},{"location":"k8s/tools/#kuard","text":"Kuard is a small demo application to show your cluster works. Also exposes some info you might want to see. 1 2 kubectl run --restart = Never --image = gcr.io/kuar-demo/kuard-amd64:blue kuard kubectl port-forward kuard 8080 :8080 Open your browser to http://localhost:8080 .","title":"Kuard"},{"location":"k8s/tools/#stern","text":"Stern allows you to tail multiple pods on Kubernetes and multiple containers within the pod. Each result is color coded for quicker debugging. 1 brew install stern","title":"Stern"},{"location":"k8s/tools/#usage","text":"Imagine a build in Jenkins using more than one container in the Pod. You want to tail the logs of all containers... you can with stern. 1 stern maven-","title":"Usage"},{"location":"k8s/tools/#kube-capacity","text":"Kube Capacity is a simple CLI that provides an overview of the resource requests, limits, and utilization in a Kubernetes cluster. 1 2 brew tap robscott/tap brew install robscott/tap/kube-capacity 1 kube-capacity 1 2 3 4 NODE CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * 560m ( 28 % ) 130m ( 7 % ) 572Mi ( 9 % ) 770Mi ( 13 % ) example-node-1 220m ( 22 % ) 10m ( 1 % ) 192Mi ( 6 % ) 360Mi ( 12 % ) example-node-2 340m ( 34 % ) 120m ( 12 % ) 380Mi ( 13 % ) 410Mi ( 14 % ) 1 kube-capacity --pods 1 2 3 4 5 6 7 8 9 10 NODE NAMESPACE POD CPU REQUESTS CPU LIMITS MEMORY REQUESTS MEMORY LIMITS * * * 560m ( 28 % ) 780m ( 38 % ) 572Mi ( 9 % ) 770Mi ( 13 % ) example-node-1 * * 220m ( 22 % ) 320m ( 32 % ) 192Mi ( 6 % ) 360Mi ( 12 % ) example-node-1 kube-system metrics-server-lwc6z 100m ( 10 % ) 200m ( 20 % ) 100Mi ( 3 % ) 200Mi ( 7 % ) example-node-1 kube-system coredns-7b5bcb98f8 120m ( 12 % ) 120m ( 12 % ) 92Mi ( 3 % ) 160Mi ( 5 % ) example-node-2 * * 340m ( 34 % ) 460m ( 46 % ) 380Mi ( 13 % ) 410Mi ( 14 % ) example-node-2 kube-system kube-proxy-3ki7 200m ( 20 % ) 280m ( 28 % ) 210Mi ( 7 % ) 210Mi ( 7 % ) example-node-2 tiller tiller-deploy 140m ( 14 % ) 180m ( 18 % ) 170Mi ( 5 % ) 200Mi ( 7 % ) 1 kube-capacity --util 1 2 3 4 NODE CPU REQUESTS CPU LIMITS CPU UTIL MEMORY REQUESTS MEMORY LIMITS MEMORY UTIL * 560m ( 28 % ) 130m ( 7 % ) 40m ( 2 % ) 572Mi ( 9 % ) 770Mi ( 13 % ) 470Mi ( 8 % ) example-node-1 220m ( 22 % ) 10m ( 1 % ) 10m ( 1 % ) 192Mi ( 6 % ) 360Mi ( 12 % ) 210Mi ( 7 % ) example-node-2 340m ( 34 % ) 120m ( 12 % ) 30m ( 3 % ) 380Mi ( 13 % ) 410Mi ( 14 % ) 260Mi ( 9 % ) 1 kube-capacity --pods --util","title":"Kube Capacity"},{"location":"k8s/tools/#velero","text":"Velero","title":"Velero"},{"location":"k8s/tools/#rbac-lookup","text":"RBAC Lookup","title":"RBAC Lookup"},{"location":"k8s/tools/#install","text":"bash 1 brew install reactiveops/tap/rbac-lookup Krew 1 kubectl krew install rbac-lookup","title":"Install"},{"location":"k8s/tools/#lookup-user","text":"1 rbac-lookup jvandergriendt -owide","title":"Lookup user"},{"location":"k8s/tools/#lookup-gke-user","text":"1 rbac-lookup jvandergriendt --gke","title":"Lookup GKE user"},{"location":"k8s/tools/#k9s","text":"K9S is a tool that gives you a console UI on your kubernetes cluster/namespace.","title":"K9S"},{"location":"k8s/tools/#install_1","text":"1 brew tap derailed/k9s brew install k9s","title":"Install"},{"location":"k8s/tools/#use","text":"By default is looks at a single namespace, and allows you to view elements of the pods running. 1 k9s -n cje","title":"Use"},{"location":"k8s/tools/#kiali","text":"https://www.kiali.io/","title":"Kiali"},{"location":"k8s/tools/#telepresence","text":"https://www.telepresence.io/","title":"Telepresence"},{"location":"k8s/tools/#dive","text":"","title":"Dive"},{"location":"tips/commands/","text":"Useful Commands","title":"Command Overview"},{"location":"tips/commands/#useful-commands","text":"","title":"Useful Commands"},{"location":"tips/custom-domain/","text":"Custom Domain","title":"Custom Domain"},{"location":"tips/custom-domain/#custom-domain","text":"","title":"Custom Domain"},{"location":"tips/gitops/","text":"Jenkins X - GitOps flag","title":"GitOps"},{"location":"tips/gitops/#jenkins-x-gitops-flag","text":"","title":"Jenkins X  - GitOps flag"},{"location":"tips/vault/","text":"Vault addon","title":"Vault"},{"location":"tips/vault/#vault-addon","text":"","title":"Vault addon"},{"location":"xfiles/","text":"XFiles Demo","title":"Overview"},{"location":"xfiles/#xfiles-demo","text":"","title":"XFiles Demo"},{"location":"xfiles/integration/","text":"XFiles - Integration","title":"Integration"},{"location":"xfiles/integration/#xfiles-integration","text":"","title":"XFiles - Integration"},{"location":"xfiles/mulder/","text":"XFiles - Mulder","title":"Mulder"},{"location":"xfiles/mulder/#xfiles-mulder","text":"","title":"XFiles - Mulder"},{"location":"xfiles/scully/","text":"XFiles - Scully","title":"Scully"},{"location":"xfiles/scully/#xfiles-scully","text":"","title":"XFiles - Scully"}]}